{"version":3,"sources":["components/LargeColor.js","components/ColorItem.js","components/RelatedColors.js","GraphQL/Queries.js","pages/ColorDetail.js","components/Searchbar.js","components/Header.js","components/Sidebar.js","components/ColorList.js","components/Pagination.js","pages/Main.js","components/Routes.js","components/App.js","index.js"],"names":["LargeColor","color","className","style","background","hex","ColorItem","height","textDecoration","borderTopRightRadius","borderTopLeftRadius","to","Tooltip","title","arrow","onClick","setTimeout","alert","navigator","clipboard","writeText","RelatedColors","colors","useState","similarColors","setSimilarColors","useEffect","length","similar","filter","col","colorCategory","slice","map","LOAD_COLORS","gql","LOAD_COLOR","ColorDetail","match","setColor","useQuery","variables","params","data","loading","error","getColor","Searchbar","passUpdatedList","userSearchFilter","setUserSearchFilter","type","placeholder","onChange","e","inputVal","substr","updatedList","toLowerCase","includes","filterHandler","target","value","Header","width","viewBox","version","xmlns","xmlnsXlink","fill","d","id","Sidebar","colorFilter","currentColor","setCurrentColor","history","useHistory","rand","Math","floor","random","push","ColorList","Pagination","currentPage","pages","itemsPerPage","setCurrentPage","console","log","p","fontSize","Main","filteredColors","searchedColors","searchActive","setPages","numPages","pagesArray","ceil","i","Routes","setColors","setFilteredColors","setSearchedColors","getAllColors","updatedColors","list","exact","path","render","props","errorLink","onError","graphqlErrors","networkError","message","location","link","from","HttpLink","uri","client","ApolloClient","cache","InMemoryCache","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.085a93f7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./LargeColor.css\";\n\nconst LargeColor = ({ color }) => {\n  return (\n    <div className='LargeColor'>\n      <div\n        className='LargeColor-color'\n        style={{ background: \"#\" + color.hex }}></div>\n      <div className='LargeColor-detail'>#{color.hex}</div>\n    </div>\n  );\n};\n\nexport default LargeColor;\n","import React from \"react\";\nimport \"./ColorItem.css\";\nimport { Link } from \"react-router-dom\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nconst ColorItem = ({ color, height }) => {\n  const copyToClip = () => {\n    setTimeout(function () {\n      alert(\"Copied to clipboard!\");\n    }, 1);\n    navigator.clipboard.writeText(\"#\" + color.hex);\n  };\n\n  return (\n    <div>\n      <div className='ColorItem' style={{ height: height }}>\n        <Link\n          style={{\n            textDecoration: \"none\",\n            background: `#${color.hex}`,\n            borderTopRightRadius: \"5px\",\n            borderTopLeftRadius: \"5px\",\n          }}\n          to={`/${color.hex}`}>\n          <div className='ColorItem-color'></div>\n        </Link>\n        <Tooltip title='Copy to Clipboard' arrow>\n          <div onClick={copyToClip} className='ColorItem-detail'>\n            #{color.hex}\n          </div>\n        </Tooltip>\n      </div>\n    </div>\n  );\n};\n\nexport default ColorItem;\n","import React, { useEffect, useState } from \"react\";\nimport ColorItem from \"./ColorItem\";\nimport \"./RelatedColors.css\";\n\nconst RelatedColors = ({ color, colors }) => {\n  const [similarColors, setSimilarColors] = useState([]);\n\n  useEffect(() => {\n    if (colors.length > 0) {\n      const similar = colors.filter((col) => {\n        return (\n          col.colorCategory === color.colorCategory && col.hex !== color.hex\n        );\n      });\n      setSimilarColors(similar);\n    }\n  }, [color, colors]);\n\n  return (\n    <div className='RelatedColors'>\n      {similarColors.length > 0 &&\n        similarColors.slice(0, 5).map((col) => {\n          return <ColorItem key={col.hex} color={col} height={\"200px\"} />;\n        })}\n    </div>\n  );\n};\n\nexport default RelatedColors;\n","import { gql } from \"@apollo/client\";\n\nexport const LOAD_COLORS = gql`\n  query {\n    getAllColors {\n      colorCategory\n      hex\n    }\n  }\n`;\n\nexport const LOAD_COLOR = gql`\n  query GetColor($hex: String!) {\n    getColor(hex: $hex) {\n      colorCategory\n      hex\n    }\n  }\n`;\n","import React, { useEffect, useState } from \"react\";\nimport LargeColor from \"../components/LargeColor.js\";\nimport \"./ColorDetail.css\";\nimport RelatedColors from \"../components/RelatedColors\";\nimport { Link } from \"react-router-dom\";\nimport { LOAD_COLOR } from \"../GraphQL/Queries\";\nimport { useQuery } from \"@apollo/client\";\n\nconst ColorDetail = ({ match, colors }) => {\n  const [color, setColor] = useState([]);\n  const { loading, error, data } = useQuery(LOAD_COLOR, {\n    variables: { hex: match.params.hex },\n  });\n\n  useEffect(() => {\n    if (data) {\n      setColor(data.getColor);\n    }\n  }, [data]);\n\n  return (\n    <div className='ColorDetail'>\n      {color && (\n        <>\n          <LargeColor color={color} />\n          <RelatedColors color={color} colors={colors} />\n          <div className='ColorDetail-buttonContainer'>\n            <Link to='/'>\n              <button className='ColorDetail-button'>Clear</button>\n            </Link>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default ColorDetail;\n","import React, { useState } from \"react\";\n\nconst Searchbar = ({ colors, passUpdatedList }) => {\n  const [userSearchFilter, setUserSearchFilter] = useState(\"\");\n\n  const filterHandler = (inputVal) => {\n    setUserSearchFilter(inputVal);\n    if (inputVal[0] === \"#\") {\n      inputVal = inputVal.substr(1, inputVal.length);\n    }\n    const updatedList =\n      colors &&\n      colors.filter((col) => {\n        // Can also use .startsWith here if you prefer\n        return col.hex.toLowerCase().includes(inputVal.toLowerCase());\n      });\n    if (updatedList.length !== 0) {\n      passUpdatedList(updatedList);\n    } else {\n      passUpdatedList([]);\n    }\n  };\n\n  return (\n    <input\n      type='text'\n      placeholder='Search for a hex...'\n      onChange={(e) => filterHandler(e.target.value)}\n      value={userSearchFilter}\n    />\n  );\n};\n\nexport default Searchbar;\n","import React from \"react\";\nimport \"./Header.css\";\nimport Searchbar from \"./Searchbar\";\n\nconst Header = ({ colors, passUpdatedList }) => {\n  return (\n    <div className='Header'>\n      <div className='Header-container'>\n        <div className='Header-logo'>\n          <svg\n            width='45px'\n            height='45px'\n            viewBox='0 0 52 52'\n            version='1.1'\n            xmlns='http://www.w3.org/2000/svg'\n            xmlnsXlink='http://www.w3.org/1999/xlink'>\n            <g fill='#fff'>\n              <path\n                d='M26.216,1.895 C12.806,1.895 1.896,12.805 1.896,26.215 C1.896,39.626 12.806,50.536 26.216,50.536 C39.626,50.536 50.536,39.626 50.536,26.215 C50.536,12.805 39.626,1.895 26.216,1.895 M26.216,52.431 C11.76,52.431 0,40.67 0,26.215 C0,11.76 11.76,0 26.216,0 C40.671,0 52.431,11.76 52.431,26.215 C52.431,40.67 40.671,52.431 26.216,52.431'\n                id='Fill-3'></path>\n              <path\n                d='M26.558,26.002 C31.58,24.335 35.918,22.895 35.918,15.042 L35.918,14.63 L35.918,14.173 L35.918,13 L33.889,13 L33.889,15.042 C33.889,21.431 30.718,22.483 25.918,24.077 C24.173,24.656 22.207,25.319 20.38,26.365 L20.38,13 L18.351,13 L18.351,27.772 C17.481,28.503 16.693,29.381 16.029,30.441 L16.029,13 L14,13 L14,38.565 L14,40.607 L16.029,40.607 L16.029,39.435 L16.029,38.565 C16.029,29.497 21.622,27.64 26.558,26.002'\n                id='Fill-6'></path>\n              <path\n                d='M37.89,13 L37.89,13.266 L37.89,14.173 L37.89,14.63 L37.89,15.042 C37.89,24.15 32.285,26.011 27.338,27.652 C22.327,29.315 18,30.751 18,38.565 L18,39.435 L18,40.607 L20.03,40.607 L20.03,38.565 C20.03,32.216 23.191,31.167 27.977,29.578 C29.73,28.996 31.704,28.331 33.538,27.277 L33.538,40.607 L35.568,40.607 L35.568,25.867 C36.439,25.133 37.227,24.252 37.89,23.189 L37.89,40.607 L39.919,40.607 L39.919,15.042 L39.919,13.266 L39.919,13 L37.89,13 Z'\n                id='Fill-8'></path>\n            </g>\n          </svg>\n        </div>\n        <div className='Header-searchbar'>\n          <Searchbar colors={colors} passUpdatedList={passUpdatedList} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport \"./Sidebar.css\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Sidebar = ({ colorFilter, colors }) => {\n  const [currentColor, setCurrentColor] = useState(null);\n  const history = useHistory();\n\n  const handleClick = (color) => {\n    setCurrentColor(color);\n    colorFilter(color);\n  };\n\n  const randomizeColor = () => {\n    const rand = colors[Math.floor(Math.random() * colors.length)];\n    history.push(`/${rand.hex}`);\n  };\n\n  const colorCategories = [\n    \"Red\",\n    \"Orange\",\n    \"Yellow\",\n    \"Green\",\n    \"Blue\",\n    \"Purple\",\n    \"Brown\",\n    \"Gray\",\n  ];\n  return (\n    <div className='Sidebar'>\n      <div>\n        <div className='Sidebar-buttonContainer'>\n          <button onClick={randomizeColor} className='Sidebar-button'>\n            Random Color\n          </button>\n        </div>\n        <ul className='Sidebar-list'>\n          {colorCategories.map((col) => (\n            <li\n              key={col}\n              onClick={() => handleClick(col)}\n              className='Sidebar-listItem'\n              style={{ color: col === currentColor ? \"black\" : \"\" }}>\n              {col}\n            </li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default Sidebar;\n","import React from \"react\";\nimport ColorItem from \"./ColorItem\";\nimport \"./ColorList.css\";\n\nconst ColorList = ({ colors }) => {\n  return (\n    <div className='ColorList'>\n      {colors.length > 0 &&\n        colors.map((col) => {\n          return <ColorItem key={col.hex} color={col} height={\"270px\"} />;\n        })}\n    </div>\n  );\n};\n\nexport default ColorList;\n","import React from \"react\";\nimport \"./Pagination.css\";\n\nconst Pagination = ({\n  currentPage,\n  itemsPerPage,\n  pages,\n  setCurrentPage,\n  colors,\n}) => {\n  const handleClick = (page) => {\n    setCurrentPage(page);\n  };\n  return (\n    <div>\n      {console.log(colors)}\n      {colors != null && colors.length === 0 ? (\n        <div>Sorry, try another search!</div>\n      ) : (\n        <div className='Pagination'>\n          <ul className='Pagination-list'>\n            {pages != null &&\n              pages.map((p) => {\n                return (\n                  <li\n                    className='Pagination-listItem'\n                    key={p}\n                    onClick={() => handleClick(p)}\n                    style={{\n                      textDecoration: p === currentPage ? \"underline\" : \"\",\n                      fontSize: p === currentPage ? \"23px\" : \"\",\n                      color: p === currentPage ? \"black\" : \"\",\n                    }}>\n                    {p + 1}\n                  </li>\n                );\n              })}\n          </ul>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default Pagination;\n","import React, { useState, useEffect } from \"react\";\nimport ColorList from \"../components/ColorList\";\nimport \"./Main.css\";\nimport Pagination from \"../components/Pagination\";\n\nconst Main = ({ colors, filteredColors, searchedColors, searchActive }) => {\n  const [itemsPerPage, setItemsPerPage] = useState(12);\n  const [currentPage, setCurrentPage] = useState(0);\n  const [pages, setPages] = useState(null);\n\n  useEffect(() => {\n    let pagesArray = [];\n    let numPages;\n    if (filteredColors.length > 0) {\n      numPages = Math.ceil(filteredColors.length / itemsPerPage);\n    } else {\n      numPages = Math.ceil(colors.length / itemsPerPage);\n    }\n    for (let i = 0; i < numPages; i++) {\n      pagesArray.push(i);\n    }\n    setPages(pagesArray);\n  }, [colors, filteredColors, itemsPerPage]);\n\n  useEffect(() => {\n    setCurrentPage(0);\n  }, [filteredColors]);\n\n  return (\n    <div className='Main'>\n      <div>\n        {filteredColors.length > 0 ? (\n          <ColorList\n            colors={filteredColors.slice(\n              currentPage * itemsPerPage,\n              currentPage * itemsPerPage + itemsPerPage\n            )}\n          />\n        ) : searchedColors != null ? (\n          <ColorList\n            colors={searchedColors.slice(\n              currentPage * itemsPerPage,\n              currentPage * itemsPerPage + itemsPerPage\n            )}\n          />\n        ) : (\n          <ColorList\n            colors={colors.slice(\n              currentPage * itemsPerPage,\n              currentPage * itemsPerPage + itemsPerPage\n            )}\n          />\n        )}\n      </div>\n      <div>\n        <Pagination\n          colors={searchedColors}\n          currentPage={currentPage}\n          itemsPerPage={itemsPerPage}\n          pages={pages}\n          setCurrentPage={setCurrentPage}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Main;\n","import React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport ColorDetail from \"../pages/ColorDetail\";\nimport Header from \"../components/Header\";\nimport Sidebar from \"../components/Sidebar\";\nimport Main from \"../pages/Main\";\nimport { useQuery } from \"@apollo/client\";\n\nimport { LOAD_COLORS } from \"../GraphQL/Queries\";\n\nconst Routes = () => {\n  const [colors, setColors] = useState([]);\n  const [filteredColors, setFilteredColors] = useState([]);\n  const [searchedColors, setSearchedColors] = useState(null);\n\n  const { error, loading, data } = useQuery(LOAD_COLORS);\n\n  const colorFilter = (color) => {\n    const updatedColors = colors.filter((col) => col.colorCategory === color);\n    setFilteredColors(updatedColors);\n  };\n\n  useEffect(() => {\n    if (data) {\n      setColors(data.getAllColors);\n    }\n  }, [data]);\n\n  const passUpdatedList = (list) => {\n    setSearchedColors(list);\n  };\n\n  return (\n    <Router>\n      {colors && <Sidebar colorFilter={colorFilter} colors={colors} />}\n      {colors && <Header colors={colors} passUpdatedList={passUpdatedList} />}\n      <Switch>\n        <Route\n          exact\n          path='/'\n          render={(props) => (\n            <Main\n              {...props}\n              colors={colors}\n              filteredColors={filteredColors}\n              searchedColors={searchedColors}\n            />\n          )}\n        />\n        <Route\n          exact\n          path='/:hex'\n          render={(props) => <ColorDetail {...props} colors={colors} />}\n        />\n      </Switch>\n    </Router>\n  );\n};\n\nexport default Routes;\n","import React from \"react\";\nimport \"./App.css\";\nimport Routes from \"./Routes\";\n\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  HttpLink,\n  from,\n} from \"@apollo/client\";\nimport { onError } from \"@apollo/client/link/error\";\n\nconst errorLink = onError(({ graphqlErrors, networkError }) => {\n  if (graphqlErrors) {\n    graphqlErrors.map(({ message, location, path }) => {\n      return alert(`Graphql error ${message}`);\n    });\n  }\n});\n\nconst link = from([errorLink, new HttpLink({ uri: \"/graphql\" })]);\n\nconst client = new ApolloClient({\n  cache: new InMemoryCache(),\n  link: link,\n});\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <Routes />\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}